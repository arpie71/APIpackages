if(!is.null(f)) {
if(is.null(notice)) notice<-f else notice<-paste0(notice,"\n",f)
}
if(!is.null(notice)){
stop(notice)
}
url<-paste0(url,"search=",s.text)
url<-paste0(url,"&collections=",paste(unlist(collection), collapse=','))
s<-ck_date(start.date)
#if(!is.null(s)) stop(s)
url<-paste0(url,"&start_date=",paste(s, collapse=','))
e<-ck_date(end.date)
#if(!is.null(e)) stop(e)
url<-paste0(url,"&end_date=",paste(e, collapse=','))
# for now hardcoding date
#  url<-paste0(url,"&start_date=1974-01-01&end_date=1979-12-31")
if(!is.null(run)){
d<-fromJSON(url)
return(d)
}
if(is.null(run)){
return(url)
}
}
hlapi_search('udeac', collection=c('statedeptcables','frus'))
hlapi_search('udeac', collection=c('statedeptcables','frs'))
#hlapi_search('udeac', collection=c('statedeptcables','frus'), run='run')
hlapi_search('udeac', collection=c('statedeptcables','frus'),  start.date="1974-01-01", end.date="1979-12-31")
hlapi_search('udeac', collection=c('statedeptcables','frus'),  start.date="1974-01-01", end.date="1979-12-31", run='run')
hlapi_entity(c('geography','topic'), fields=c('subject','title'), value=c('40','0'), limit=50)
#To do: dates
require(jsonlite)
source('utils/histlabapi_utils.R')
hlapi_entity<-function(entity, value, limit = 25,fields=NULL,collection=NULL,date=NULL,start.date=NULL,end.date=NULL,run=NULL){
url<-"http://api.declassification-engine.org/declass/v0.4/?"
search<-NULL
notice<-NULL
if(missing(entity)){
notice <- "Please supply an entity: geography, topic, and/or person"
stop(notice)
}
if(missing(value)){
notice <- "Please supply a value or values for the entity or entities"
stop(notice)
}
if(length(value)!=length(entity)){
notice <- "The number of entities and the number of values do not match."
stop(notice)
}
for(i in 1:length(entity)){
if(entity[i] %ni% c("geography", "person", "topic")){
notice <- "Acceptable entities are geography, topic, and/or person"
stop(notice)
}
v<-toupper(gsub("( |&|,)","AND",value[i]))
v<-toupper(gsub("(\\|)","OR",v))
# Make sure geography is 3-digits
if(entity[i]=="geography"){
g.list<-strsplit(v,'AND')
for(j in 1:length(g.list[[1]])){
if(nchar(g.list[[1]][j])==2) g.list[[1]][j]<-paste0("0",g.list[[1]][j])
if(nchar(g.list[[1]][j])>3|nchar(g.list[[1]][j])<2) stop('Invalid value for geography')
}
v<-(paste0(g.list[[1]],collapse="AND"))
}
if(entity[i]=="geography"&!is.null(search)) search<-paste0(search,"&geo_ids=",v)
if(entity[i]=="geography"&is.null(search)) search<-paste0("geo_ids=",v)
if(entity[i]=="topic"&!is.null(search)) search<-paste0(search,"&topic_ids=",v)
if(entity[i]=="topic"&is.null(search)) search<-paste0("topic_ids=",v)
if(entity[i]=="person"&!is.null(search)) search<-paste0(search,"&person_ids=",v)
if(entity[i]=="person"&is.null(search)) search<-paste0("person_ids=",v)
}
url<-paste0(url,search)
# Check fields if fields entered
if(!is.null(fields)){
f<-ck_fields(fields)
if(!is.null(f)) stop(f)
url<-paste0(url,"&fields=",paste(unlist(fields), collapse=','))
}
#Check collections if collections entered
if(!is.null(collection)){
f<-ck_collections(collection)
if(!is.null(f)) stop(f)
url<-paste0(url,"&collections=",paste(unlist(collection), collapse=','))
}
## ADD CHECK DATES - START.DATE, END.DATE, DATE all possibilities
if(!is.null(date)&(!is.null(start.date)|!is.null(end.date))){
if(is.null(notice)) notice<-"You cannot specify both a date and a start or end date." else notice<-paste0(notice,"\nYou cannot specify both a date and a start or end date.")
}
if(is.null(start.date)&!is.null(end.date)){
if(is.null(notice)) notice<-"Please specify an end date." else notice<-paste0(notice,"\nPlease specify an end date.")
}
if(is.null(end.date)&!is.null(start.date)){
if(is.null(notice)) notice<-"Please specify a start date." else notice<-paste0(notice,"\nPlease specify a start date.")
}
if(!is.null(notice)){
stop(notice)
}
if(!is.null(date)) {
d<-ck_date(date)
url<-paste0(url,"&date=",d)
}
if(!is.null(start.date)) {
s<-ck_date(start.date)
url<-paste0(url,"&date=",s)
}
if(!is.null(end.date)) {
e<-ck_date(start.date)
url<-paste0(url,"&date=",e)
}
url<-paste0(url,"&page_size=",limit)
if(!is.null(run)){
u<-fromJSON(url)
return(u)
}
if(is.null(run)){
return(url)
}
}
hlapi_entity(c('geography','topic'), fields=c('subject','title'), value=c('40','0'), date="12-31-1979",limit=50)
hlapi_entity(c('geography','topic'), fields=c('subject','title'), value=c('40','0'), date="12-33-1979",limit=50)
hlapi_entity(c('geography','topic'), fields=c('subject','title'), value=c('40','0'), date="12-31-1979",start.date="1-1-1974",limit=50)
#To do: dates
require(jsonlite)
source('utils/histlabapi_utils.R')
hlapi_entity<-function(entity, value, limit = 25,fields=NULL,collection=NULL,date=NULL,start.date=NULL,end.date=NULL,run=NULL){
url<-"http://api.declassification-engine.org/declass/v0.4/?"
search<-NULL
notice<-NULL
if(missing(entity)){
notice <- "Please supply an entity: geography, topic, and/or person"
stop(notice)
}
if(missing(value)){
notice <- "Please supply a value or values for the entity or entities"
stop(notice)
}
if(length(value)!=length(entity)){
notice <- "The number of entities and the number of values do not match."
stop(notice)
}
for(i in 1:length(entity)){
if(entity[i] %ni% c("geography", "person", "topic")){
notice <- "Acceptable entities are geography, topic, and/or person"
stop(notice)
}
v<-toupper(gsub("( |&|,)","AND",value[i]))
v<-toupper(gsub("(\\|)","OR",v))
# Make sure geography is 3-digits
if(entity[i]=="geography"){
g.list<-strsplit(v,'AND')
for(j in 1:length(g.list[[1]])){
if(nchar(g.list[[1]][j])==2) g.list[[1]][j]<-paste0("0",g.list[[1]][j])
if(nchar(g.list[[1]][j])>3|nchar(g.list[[1]][j])<2) stop('Invalid value for geography')
}
v<-(paste0(g.list[[1]],collapse="AND"))
}
if(entity[i]=="geography"&!is.null(search)) search<-paste0(search,"&geo_ids=",v)
if(entity[i]=="geography"&is.null(search)) search<-paste0("geo_ids=",v)
if(entity[i]=="topic"&!is.null(search)) search<-paste0(search,"&topic_ids=",v)
if(entity[i]=="topic"&is.null(search)) search<-paste0("topic_ids=",v)
if(entity[i]=="person"&!is.null(search)) search<-paste0(search,"&person_ids=",v)
if(entity[i]=="person"&is.null(search)) search<-paste0("person_ids=",v)
}
url<-paste0(url,search)
# Check fields if fields entered
if(!is.null(fields)){
f<-ck_fields(fields)
if(!is.null(f)) stop(f)
url<-paste0(url,"&fields=",paste(unlist(fields), collapse=','))
}
#Check collections if collections entered
if(!is.null(collection)){
f<-ck_collections(collection)
if(!is.null(f)) stop(f)
url<-paste0(url,"&collections=",paste(unlist(collection), collapse=','))
}
## ADD CHECK DATES - START.DATE, END.DATE, DATE all possibilities
if(!is.null(date)&(!is.null(start.date)|!is.null(end.date))){
if(is.null(notice)) notice<-"You cannot specify both a date and a start or end date." else notice<-paste0(notice,"\nYou cannot specify both a date and a start or end date.")
}
if(!is.null(start.date)&is.null(end.date)){
if(is.null(notice)) notice<-"Please specify an end date." else notice<-paste0(notice,"\nPlease specify an end date.")
}
if(!is.null(end.date)&is.null(start.date)){
if(is.null(notice)) notice<-"Please specify a start date." else notice<-paste0(notice,"\nPlease specify a start date.")
}
if(!is.null(notice)){
stop(notice)
}
if(!is.null(date)) {
d<-ck_date(date)
url<-paste0(url,"&date=",d)
}
if(!is.null(start.date)) {
s<-ck_date(start.date)
url<-paste0(url,"&date=",s)
}
if(!is.null(end.date)) {
e<-ck_date(start.date)
url<-paste0(url,"&date=",e)
}
url<-paste0(url,"&page_size=",limit)
if(!is.null(run)){
u<-fromJSON(url)
return(u)
}
if(is.null(run)){
return(url)
}
}
hlapi_entity(c('geography','topic'), fields=c('subject','title'), value=c('40','0'), date="12-31-1979",start.date="1-1-1974",limit=50)
hlapi_entity(c('geography','topic'), fields=c('subject','title'), value=c('40','0'), start.date="1-1-1974",limit=50)
hlapi_entity(c('geography','topic'), fields=c('subject','title'), value=c('40','0'), start.date="12/31/1974",end.date="1,1,1979",limit=50)
#To do: dates
require(jsonlite)
source('utils/histlabapi_utils.R')
hlapi_entity<-function(entity, value, limit = 25,fields=NULL,collection=NULL,date=NULL,start.date=NULL,end.date=NULL,run=NULL){
url<-"http://api.declassification-engine.org/declass/v0.4/?"
search<-NULL
notice<-NULL
if(missing(entity)){
notice <- "Please supply an entity: geography, topic, and/or person"
stop(notice)
}
if(missing(value)){
notice <- "Please supply a value or values for the entity or entities"
stop(notice)
}
if(length(value)!=length(entity)){
notice <- "The number of entities and the number of values do not match."
stop(notice)
}
for(i in 1:length(entity)){
if(entity[i] %ni% c("geography", "person", "topic")){
notice <- "Acceptable entities are geography, topic, and/or person"
stop(notice)
}
v<-toupper(gsub("( |&|,)","AND",value[i]))
v<-toupper(gsub("(\\|)","OR",v))
# Make sure geography is 3-digits
if(entity[i]=="geography"){
g.list<-strsplit(v,'AND')
for(j in 1:length(g.list[[1]])){
if(nchar(g.list[[1]][j])==2) g.list[[1]][j]<-paste0("0",g.list[[1]][j])
if(nchar(g.list[[1]][j])>3|nchar(g.list[[1]][j])<2) stop('Invalid value for geography')
}
v<-(paste0(g.list[[1]],collapse="AND"))
}
if(entity[i]=="geography"&!is.null(search)) search<-paste0(search,"&geo_ids=",v)
if(entity[i]=="geography"&is.null(search)) search<-paste0("geo_ids=",v)
if(entity[i]=="topic"&!is.null(search)) search<-paste0(search,"&topic_ids=",v)
if(entity[i]=="topic"&is.null(search)) search<-paste0("topic_ids=",v)
if(entity[i]=="person"&!is.null(search)) search<-paste0(search,"&person_ids=",v)
if(entity[i]=="person"&is.null(search)) search<-paste0("person_ids=",v)
}
url<-paste0(url,search)
# Check fields if fields entered
if(!is.null(fields)){
f<-ck_fields(fields)
if(!is.null(f)) stop(f)
url<-paste0(url,"&fields=",paste(unlist(fields), collapse=','))
}
#Check collections if collections entered
if(!is.null(collection)){
f<-ck_collections(collection)
if(!is.null(f)) stop(f)
url<-paste0(url,"&collections=",paste(unlist(collection), collapse=','))
}
## ADD CHECK DATES - START.DATE, END.DATE, DATE all possibilities
if(!is.null(date)&(!is.null(start.date)|!is.null(end.date))){
if(is.null(notice)) notice<-"You cannot specify both a date and a start or end date." else notice<-paste0(notice,"\nYou cannot specify both a date and a start or end date.")
}
if(!is.null(start.date)&is.null(end.date)){
if(is.null(notice)) notice<-"Please specify an end date." else notice<-paste0(notice,"\nPlease specify an end date.")
}
if(!is.null(end.date)&is.null(start.date)){
if(is.null(notice)) notice<-"Please specify a start date." else notice<-paste0(notice,"\nPlease specify a start date.")
}
if(!is.null(notice)){
stop(notice)
}
if(!is.null(date)) {
d<-ck_date(date)
url<-paste0(url,"&date=",d)
}
if(!is.null(start.date)) {
s<-ck_date(start.date)
url<-paste0(url,"&start_date=",s)
}
if(!is.null(end.date)) {
e<-ck_date(end.date)
url<-paste0(url,"&end_date=",e)
}
url<-paste0(url,"&page_size=",limit)
if(!is.null(run)){
u<-fromJSON(url)
return(u)
}
if(is.null(run)){
return(url)
}
}
hlapi_entity(c('geography','topic'), fields=c('subject','title'), value=c('40','0'), date="12-31-1979",limit=50)
# invalid date
hlapi_entity(c('geography','topic'), fields=c('subject','title'), value=c('40','0'), date="12-33-1979",limit=50)
# date & start.date
hlapi_entity(c('geography','topic'), fields=c('subject','title'), value=c('40','0'), date="12-31-1979",start.date="1-1-1974",limit=50)
# no end.date & start.date
hlapi_entity(c('geography','topic'), fields=c('subject','title'), value=c('40','0'), start.date="1-1-1974",limit=50)
# date formats
hlapi_entity(c('geography','topic'), fields=c('subject','title'), value=c('40','0'), start.date="12/31/1974",end.date="1,1,1979",limit=50)
hlapi_entity(c('geography','topic'), fields=c('subject','title'), value=c('40','0'), start.date="12/31/1974",end.date="1.1.1979",limit=50)
'%ni%'<-Negate('%in%')
ck_fields<-function(fields){
#' This function checks to make sure that the fields listed are correct
#' And it gets the field list ready to send to API endpoint
#' @param fields List of fields to check
#' Note: right now fields are hard-coded but will be moved to configuration file
field.list<-c("body","body_html","body_summary","chapt_title","countries","collection","date","date_year","date_month","from_field","id","location","nuclear","persons","topics","classification","refs","cable_references","source","source_path","cable_type","subject","title","to_field","tags","description","category","pdf","title_docview","orighand","concepts","type","office","readability")
n<-NULL
for(f in fields){
if(f %ni% field.list){
if(is.null(n)) n<-f else n<-paste(n,f, sep=',')
}
}
notice<-NULL
if(!is.null(n)){
if(grepl(",",n)) verb<-"are" else verb<-"is"
notice<-paste("Field Error:", n,verb,"not valid")
}
return(notice)
}
ck_collections<-function(collections){
#' This function checks to make sure that the collections listed are correct
#' @param collections List of collections to check
#' Note: right now collections are hard-coded but will be moved to configuration file
collection.list<-c("cpdoc","clinton","kissinger","statedeptcables","frus","ddrs","cabinet","pdb")
n<-NULL
for(c in collections){
if(c %ni% collection.list){
if(is.null(n)) n<-c else n<-paste(n,c, sep=',')
}
}
notice<-NULL
if(!is.null(n)){
if(grepl(",",n)) verb<-"are" else verb<-"is"
notice<-paste("Collection Error:", n,verb,"not valid")
}
return(notice)
}
ck_date<-function(dates){
notice<-NULL
#convert date to Y-M-D format
d<-strsplit(dates,"(/|-|\\.)")
if(length(d[[1]])!=3) notice<-"Please supply a month, day, and year separated by /,-, or ."
if(length(d[[1]])==3) {
yr<-mo<-day<-NULL
if(nchar(d[[1]][1])==4){
yr<-d[[1]][1]
if(d[[1]][2]>12) {
day<-d[[1]][2]
mo<-d[[1]][3]
} else{
day<-d[[1]][3]
mo<-d[[1]][2]
}
} else if(nchar(d[[1]][3])==4){
yr<-d[[1]][3]
if(d[[1]][1]>12) {
day<-d[[1]][1]
mo<-d[[1]][2]
} else {
day<-d[[1]][2]
mo<-d[[1]][1]
}
} else if(nchar(d[[1]][2])==4){
yr<-d[[1]][2]
if(d[[1]][1]>12) {
day<-d[[1]][1]
mo<-d[[1]][3]
} else{
day<-d[[1]][3]
mo<-d[[1]][1]
}
} else {
if(is.null(notice)) notice <- "Year must be a 4-digit number" else notice<-paste0(notice,"\nYear must be a 4-digit number")
}
date1<-paste(yr,mo,day,sep='-')
#check if date is valid
d1<-try(as.Date(paste(yr,mo,day,sep='-'),date.format="%y-%m-%d"), silent=TRUE)
if(!class(d1)=="Date"){
notice<-paste0(dates," is not a valid date")
}
}
if(!is.null(notice)) stop(notice)
if(nchar(mo)<2) mo<-paste0("0",mo)
if(nchar(day)<2) day<-paste0("0",day)
date1<-paste(yr,mo,day,sep='-')
return(date1)
}
require(jsonlite)
source('utils/histlabapi_utils.R')
hlapi_entity<-function(entity, value, limit = 25,fields=NULL,collection=NULL,date=NULL,start.date=NULL,end.date=NULL,run=NULL){
url<-"http://api.declassification-engine.org/declass/v0.4/?"
search<-NULL
notice<-NULL
if(missing(entity)){
notice <- "Please supply an entity: geography, topic, and/or person"
stop(notice)
}
if(missing(value)){
notice <- "Please supply a value or values for the entity or entities"
stop(notice)
}
if(length(value)!=length(entity)){
notice <- "The number of entities and the number of values do not match."
stop(notice)
}
for(i in 1:length(entity)){
if(entity[i] %ni% c("geography", "person", "topic")){
notice <- "Acceptable entities are geography, topic, and/or person"
stop(notice)
}
v<-toupper(gsub("( |&|,)","AND",value[i]))
v<-toupper(gsub("(\\|)","OR",v))
# Make sure geography is 3-digits
if(entity[i]=="geography"){
g.list<-strsplit(v,'AND')
for(j in 1:length(g.list[[1]])){
if(nchar(g.list[[1]][j])==2) g.list[[1]][j]<-paste0("0",g.list[[1]][j])
if(nchar(g.list[[1]][j])>3|nchar(g.list[[1]][j])<2) stop('Invalid value for geography')
}
v<-(paste0(g.list[[1]],collapse="AND"))
}
if(entity[i]=="geography"&!is.null(search)) search<-paste0(search,"&geo_ids=",v)
if(entity[i]=="geography"&is.null(search)) search<-paste0("geo_ids=",v)
if(entity[i]=="topic"&!is.null(search)) search<-paste0(search,"&topic_ids=",v)
if(entity[i]=="topic"&is.null(search)) search<-paste0("topic_ids=",v)
if(entity[i]=="person"&!is.null(search)) search<-paste0(search,"&person_ids=",v)
if(entity[i]=="person"&is.null(search)) search<-paste0("person_ids=",v)
}
url<-paste0(url,search)
# Check fields if fields entered
if(!is.null(fields)){
f<-ck_fields(fields)
if(!is.null(f)) stop(f)
url<-paste0(url,"&fields=",paste(unlist(fields), collapse=','))
}
#Check collections if collections entered
if(!is.null(collection)){
f<-ck_collections(collection)
if(!is.null(f)) stop(f)
url<-paste0(url,"&collections=",paste(unlist(collection), collapse=','))
}
## ADD CHECK DATES - START.DATE, END.DATE, DATE all possibilities
if(!is.null(date)&(!is.null(start.date)|!is.null(end.date))){
if(is.null(notice)) notice<-"You cannot specify both a date and a start or end date." else notice<-paste0(notice,"\nYou cannot specify both a date and a start or end date.")
}
if(!is.null(start.date)&is.null(end.date)){
if(is.null(notice)) notice<-"Please specify an end date." else notice<-paste0(notice,"\nPlease specify an end date.")
}
if(!is.null(end.date)&is.null(start.date)){
if(is.null(notice)) notice<-"Please specify a start date." else notice<-paste0(notice,"\nPlease specify a start date.")
}
if(!is.null(notice)){
stop(notice)
}
if(!is.null(date)) {
d<-ck_date(date)
url<-paste0(url,"&date=",d)
}
if(!is.null(start.date)) {
s<-ck_date(start.date)
url<-paste0(url,"&start_date=",s)
}
if(!is.null(end.date)) {
e<-ck_date(end.date)
url<-paste0(url,"&end_date=",e)
}
url<-paste0(url,"&page_size=",limit)
if(!is.null(run)){
u<-fromJSON(url)
return(u)
}
if(is.null(run)){
return(url)
}
}
hlapi_entity(c('geography','topic'), fields=c('subject','title'), value=c('40','0'), date="12-31-1979",limit=50)
# invalid date
hlapi_entity(c('geography','topic'), fields=c('subject','title'), value=c('40','0'), date="12-33-1979",limit=50)
# date & start.date
hlapi_entity(c('geography','topic'), fields=c('subject','title'), value=c('40','0'), date="12-31-1979",start.date="1-1-1974",limit=50)
# no end.date & start.date
hlapi_entity(c('geography','topic'), fields=c('subject','title'), value=c('40','0'), start.date="1-1-1974",limit=50)
# date formats
hlapi_entity(c('geography','topic'), fields=c('subject','title'), value=c('40','0'), start.date="12/31/1974",end.date="1,1,1979",limit=50)
hlapi_entity(c('geography','topic'), fields=c('subject','title'), value=c('40','0'), start.date="12/31/1974",end.date="1.1.1979",limit=50)
hlapi_entity(c('geography','topic'), fields=c('subject','title'), value=c('40','0'), start.date="12/31/1974",end.date="1.1.1979",limit=50, run='run')
devtools::use_vignette("histlabapi")
library(devtools)
install.packages("devtools")
devtools::use_vignette("histlabapi")
library(devtools)
devtools::use_vignette("histlabapi")
usethis::use_vignette('histlabapi')
install.packages("roxygen2")
library(roxygen2)
create(histlabapi)
create("histlabapi")
setwd('../')
