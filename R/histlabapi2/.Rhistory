#    if(is.null(notice)) notice<-f else notice<-paste0(notice,"\n",f)
#  }
if(!is.null(start.date)&is.null(end.date)){
if(is.null(notice)) notice<-"Please specify an end date." else notice<-paste0(notice,"\nPlease specify an end date.")
}
if(!is.null(end.date)&is.null(start.date)){
if(is.null(notice)) notice<-"Please specify a start date." else notice<-paste0(notice,"\nPlease specify a start date.")
}
if(!is.null(notice)){
stop(notice)
}
#print(length(s.text))
if(length(s.text)>1 & isTRUE(or)){
s.text<-gsub("\\s+","%20",s.text)
url<-paste0(url,"full_text=wfts.",paste(unlist(s.text), collapse='%20or%20'))
}
if(length(s.text)==1 & isTRUE(or) | (!isTRUE(or))){
s.text<-gsub("\\s+","%20",s.text)
url<-paste0(url,"full_text=wfts.",paste(unlist(s.text), collapse='%20'))
#url<-paste0(url,"full_text=wfts.",s.text)
}
url<-paste0(url,"&select=",paste(unlist(fields), collapse=','))
if(!is.null(entity.type)) {
url<-ck_entities(url,entity.type)
# for(i in 1:length(entity.type)){
#   if(entity.type[i] %ni% c("countries", "persons", "topics")){
#     notice <- "Acceptable entities are countries, topics, and/or persons"
#     stop(notice)
#   }
#   if(entity.type[i]=="topics"){
#     url<-paste(url,"topics(topic_name)", sep=',')
#   }
#   if(entity.type[i]=="countries"){
#     url<-paste(url,"countries(country_name)", sep=',')
#   }
#   if(entity.type[i]=="persons"){
#     url<-paste(url,"persons(person_name)", sep=',')
#   }
#
# }
}
#url<-paste0(url,"&collections=",paste(unlist(coll.name), collapse=','))
if(!is.null(end.date)&!is.null(start.date)){
s<-ck_date(start.date)
e<-ck_date(end.date)
if(as.Date(s,date.format="%y-%m-%d")>as.Date(e,date.format="%y-%m-%d")){
stop('Start date must be less than or equal to end date.')
}
url<-paste0(url,"&authored=gte.",paste(s, collapse=','))
url<-paste0(url,"&authored=lte.",paste(e, collapse=','))
}
url<-paste0(url,"&limit=",limit)
if(isTRUE(run)){
return(hlresults(url))
}
if(!isTRUE(run)){
return(url)
}
}
(mm <- rbind(x = round(2*stats::runif(12)),
y = round(5*stats::runif(12)),
z = round(8*stats::runif(12))))
max.col(mm)
max.col(mm, "last")
max.col(mm, "first")
#' History Lab API - Full text search
#'
#' This program allows a full text search using the History Lab API.
#' In addition to a search term, collection and start.date and end.date are required fields.
#' @param s.text Text to search--can be a single word, multiword phrase, or multiple variants
#' @param collection History Lab collection to search
#' @param start.date/end.date Date range for the search
#' @param fields Specific History Lab fields to return
#' @param topics Return the topics for an ID or list of IDs
#' @param countries Return the countries for an ID or list of IDs
#' @param persons Return the persons for an ID or list of IDs
#' @param limit Number of results to return
#'
#' @return
#' @export
#' @examples
#' hlapi_search('udeac', collection=c('statedeptcables','frus'),  start.date="1974-01-01", end.date="1979-12-31")
#docs?full_text=wfts.iraq%20rumsfeld&select=doc_id,authored,classification,title
# To- do: Phrases
require(jsonlite)
source('R/histlabapi_utils.R')
hlapi_search<-function(s.text, fields=NULL, entity.type=NULL, or = FALSE, start.date=NULL,end.date=NULL, limit = 25,run=NULL,...){
url<-"http://api.foiarchive.org/docs?"
search<-NULL
notice<-NULL
if(missing(s.text)){
if(is.null(notice)) notice <- "Please supply a search term" else notice<-paste0(notice,"\nPlease supply a search term")
}
#if(is.null(coll.name)){
#  if(is.null(notice)) notice<-"The name of at least one collection is necessary for a full-text search." else notice<-paste0(notice,"\nThe name of at least one collection is necessary for a full-text search.")
#  #stop(notice)
#  }
if(is.null(fields)){
fields = c('doc_id','authored','title')
}
if(!is.null(fields)){
fields<-ck_list(fields)
f<-ck_fields(fields)
if(!is.null(f)) stop(f)
}
#  coll.name<-ck_list(coll.name)
#    f<-ck_collections(coll.name)
#  if(!is.null(f)) {
#    if(is.null(notice)) notice<-f else notice<-paste0(notice,"\n",f)
#  }
if(!is.null(start.date)&is.null(end.date)){
if(is.null(notice)) notice<-"Please specify an end date." else notice<-paste0(notice,"\nPlease specify an end date.")
}
if(!is.null(end.date)&is.null(start.date)){
if(is.null(notice)) notice<-"Please specify a start date." else notice<-paste0(notice,"\nPlease specify a start date.")
}
if(!is.null(notice)){
stop(notice)
}
#print(length(s.text))
if(length(s.text)>1 & isTRUE(or)){
s.text<-gsub("\\s+","%20",s.text)
url<-paste0(url,"full_text=wfts.",paste(unlist(s.text), collapse='%20or%20'))
}
if(length(s.text)==1 & isTRUE(or) | (!isTRUE(or))){
s.text<-gsub("\\s+","%20",s.text)
url<-paste0(url,"full_text=wfts.",paste(unlist(s.text), collapse='%20'))
#url<-paste0(url,"full_text=wfts.",s.text)
}
url<-paste0(url,"&select=",paste(unlist(fields), collapse=','))
if(!is.null(entity.type)) {
url<-ck_entities(url,entity.type)
# for(i in 1:length(entity.type)){
#   if(entity.type[i] %ni% c("countries", "persons", "topics")){
#     notice <- "Acceptable entities are countries, topics, and/or persons"
#     stop(notice)
#   }
#   if(entity.type[i]=="topics"){
#     url<-paste(url,"topics(topic_name)", sep=',')
#   }
#   if(entity.type[i]=="countries"){
#     url<-paste(url,"countries(country_name)", sep=',')
#   }
#   if(entity.type[i]=="persons"){
#     url<-paste(url,"persons(person_name)", sep=',')
#   }
#
# }
}
#url<-paste0(url,"&collections=",paste(unlist(coll.name), collapse=','))
if(!is.null(end.date)&!is.null(start.date)){
s<-ck_date(start.date)
e<-ck_date(end.date)
if(as.Date(s,date.format="%y-%m-%d")>as.Date(e,date.format="%y-%m-%d")){
stop('Start date must be less than or equal to end date.')
}
url<-paste0(url,"&authored=gte.",paste(s, collapse=','))
url<-paste0(url,"&authored=lte.",paste(e, collapse=','))
}
url<-paste0(url,"&limit=",limit)
if(isTRUE(run)){
return(hlresults(url))
}
if(!isTRUE(run)){
return(url)
}
}
hlapi_search(c('udeac','asean'),  entity.type="topics")
hlapi_search(c('udeac','asean'),  entity.type="topics", or=TRUE, run=TRUE)
h<-hlapi_search(c('udeac','asean'),  entity.type="topics", or=TRUE, run=TRUE)
h<-hlapi_search(c('udeac','asean'),  entity.type="topics", or=TRUE,  start.date="1950-01-01", end.date="2000-12-31", run=TRUE)
h<-hlapi_search(c('udeac','asean'),  entity.type="topics", or=TRUE,  start.date="1950-01-01", end.date="2000-12-31")
hlapi_search(c('udeac','asean'),  entity.type="topics", or=TRUE,  start.date="1950-01-01", end.date="2000-12-31")
h<-hlapi_search(c('udeac','asean'),  entity.type="topics", or=TRUE, run=TRUE)
View(h)
hlapi_search(c('udeac','asean'),  entity.type="topics", or=TRUE,  start.date="1950-01-01", end.date="1970-12-31")
hlapi_search(c('udeac','asean'),  entity.type="topics", or=TRUE,  start.date="1950-01-01", end.date="1970-12-31", run=TRUE)
hlapi_search(c('udeac','asean'),  entity.type="countries", or=TRUE,  start.date="1950-01-01", end.date="1970-12-31", run=TRUE)
hlapi_search(c('udeac','asean'),  entity.type=c("topics","countries", or=TRUE,  start.date="1950-01-01", end.date="1970-12-31", run=TRUE)
)
hlapi_search(c('udeac','asean'),  entity.type=c("topics","countries"), or=TRUE,  start.date="1950-01-01", end.date="1970-12-31", run=TRUE)
#' History Lab API - Search by ID or IDs
#'
#' This program returns a list of random IDs from across the collections.
#' Neither the date nor the collection parameters are accepted.
#' If an ID is not in the History Lab database, the function will not return results for that ID.
#'
#' @param ids ID or list of IDs to search for
#' @param fields Specific History Lab fields to return
#' @param topics Return the topics for an ID or list of IDs
#' @param countries Return the countries for an ID or list of IDs
#' @param persons Return the persons for an ID or list of IDs
#' @param limit Number of results to return
#'
#' @return
#' @export
#' @examples
#' hlapi_id(ids='ives-1771013-o_18', topics=TRUE, run='run')
#' hlapi_id(ids=c('1973LIMA07564','P760191-2216','1973LIMA01001'))
#' hlapi_id(ids=c('1973LIMA07564'))
#' hlapi_id(ids='1973LIMA07564', fields=c('subject','title'))
#"http://api.foiarchive.org/docs?doc_id=eq.frus1969-76ve05p1d11&select=doc_id,body,title,topics(topic_name)"
require(jsonlite)
source('R/histlabapi_utils.R')
hlapi_id<-function(ids=NULL, entity.type=NULL, fields=NULL, run = NULL,...) {
url<-"http://api.foiarchive.org/docs?doc_id=in.("
notice<-NULL
if(is.null(ids)) stop("You selected the id option but provided no ids. Please list ids, separated by a comma.")
ids<-gsub(',\\s+',',',ids)
ids<-gsub('\\s+',',',ids)
url<-paste0(url,paste(unlist(ids), collapse=','),")")
if(is.null(fields)){
fields = c('doc_id','authored','title')
}
if(!is.null(fields)){
fields<-ck_list(fields)
f<-ck_fields(fields)
if(!is.null(f)) stop(f)
}
url<-paste0(url,"&select=",paste(unlist(fields), collapse=','))
if(!is.null(entity.type)) {
url<-ck_entities(url,entity.type)
}
if(!is.null(run)){
#u<-fromJSON(url)
#if(!length(u)) stop("No results found", call.=FALSE)
#return(u)
u<-hlresults(url)
return(hlresults(url))
}
if(is.null(run)){
return(url)
}
}
# frus1969-76ve05p1d11, frus1958-60v03d44
#"http://api.foiarchive.org/docs?doc_id=eq.frus1969-76ve05p1d11&select=doc_id,body,title,topics(topic_name)"
## Single ID
hlapi_id(ids='frus1969-76ve05p1d11', run = TRUE)
hlapi_id(ids='frus1969-76ve05p1d11', fields = c('doc_id','body','title'), run = TRUE)
## With topics
hlapi_id(ids='frus1969-76ve05p1d11', fields = c('doc_id','body','title'), entity.type="topics", run = TRUE)
View(ck_collections)
hlapi_entity('countries', value='Belize')
fromJSON("http://api.foiarchive.org/countries?country_name=eq.Belize&select=docs(doc_id,authored,title),countries(country_id)&limit=25")
fromJSON("http://api.foiarchive.org/countries?country_name=eq.Belize&select=(docs(doc_id,authored,title),countries(country_id))&limit=25")
fromJSON("http://api.foiarchive.org/countries?country_name=eq.Belize&select=(docs(doc_id,authored,title),countries(id))&limit=25")
fromJSON("http://api.foiarchive.org/countries?country_name=eq.Belize&select=(docs(doc_id,authored,title),countries(country_name))&limit=25")
fromJSON("http://api.foiarchive.org/countries?country_name=eq.Belize&select=(docs(doc_id,authored,title),country_name)&limit=25")
fromJSON("http://api.foiarchive.org/countries?country_name=eq.Belize&select=docs(doc_id,authored,title),country_name&limit=25")
fromJSON("http://api.foiarchive.org/countries?country_name=eq.Belize&select=docs(doc_id,authored,title),country_id&limit=25")
fromJSON("http://api.foiarchive.org/countries?country_id=eq.084&select=docs(doc_id,authored,title),country_id&limit=25")
n = '084'
is.numeric(n)
is.numeric(real(n))
as.numeric(n)
n = '0S84'
as.numeric(n)
as.numeric(as.numeric(n))
is.numeric(as.numeric(n))
n
if(!is.na(as.numeric(n)) n else "string"
if(!is.na(as.numeric(n))) n else "string"
is.character(n)
n = '084'
is.character(n)
grep("^\\d+$",n)
n = '0S84'
grep("^\\d+$",n)
h<-hlapi_entity('countries', value='Belize', date="01-30-1973", run=TRUE)
hlapi_entity('countries', value='Belize', date="01-30-1973")
#' History Lab API - Entity search
#'
#' This program allows a search of the History Lab API by type of entity (countries, topics, or persons).
#'
#' @param entity.type The type of entity to search (countries, topics, and/or persons)
#' @param value The code of the specific entity to be searched
#' @param coll.name History Lab collection to search
#' @param start.date/end.date Date range for the search
#' @param fields Specific History Lab fields to return
#'
#' @return
#' @export
#' @examples
#' hlapi_entity(c('countries','topics'), fields=c('subject','title'), value=c('100','0'), limit=50, run='run')
#"http://api.foiarchive.org/countries?country_name=eq.Belize&select=docs(doc_id,authored,classification,title)"
require(jsonlite)
source('R/histlabapi_utils.R')
hlapi_entity<-function(entity.type, value, limit = 25,fields=NULL,coll.name=NULL,date=NULL,start.date=NULL,end.date=NULL,run=NULL,...){
url<-"http://api.foiarchive.org/"
search<-NULL
notice<-NULL
if(missing(entity.type)){
notice <- "Please supply an entity: countries, topics, and/or persons"
stop(notice)
}
if(missing(value)){
notice <- "Please supply a value or values for the entity or entities"
stop(notice)
}
entity.type<-ck_list(entity.type)
#value<-ck_list(value)
if(length(value)!=length(entity.type)){
notice <- "The number of entities and the number of values do not match."
stop(notice)
}
for(i in 1:length(entity.type)){
if(entity.type[i] %ni% c("countries", "persons", "topics")){
notice <- "Acceptable entities are countries, topics, and/or persons"
stop(notice)
}
v<-gsub("( |&|,)","AND",value[i])
v<-gsub("(\\|)","OR",v)
# # Make sure countries is 3-digits
# if(entity.type[i]=="countries"){
#   g.list<-strsplit(v,'AND')
#       for(j in 1:length(g.list[[1]])){
#     if(nchar(g.list[[1]][j])==2) g.list[[1]][j]<-paste0("0",g.list[[1]][j])
#     if(nchar(g.list[[1]][j])==1) g.list[[1]][j]<-paste0("00",g.list[[1]][j])
#     if(nchar(g.list[[1]][j])>3) stop('Invalid value for countries')
#   }
#     v<-(paste0(g.list[[1]],collapse="AND"))
#     }
#if(entity.type[i]=="countries"&!is.null(search)) search<-paste0(search,"&geo_ids=",v)
if(entity.type[i]=="countries"&is.null(search)) search<-paste0("countries?country_name=eq.",v)
#if(entity.type[i]=="topics"&!is.null(search)) search<-paste0(search,"&topic_ids=",v)
if(entity.type[i]=="topics"&is.null(search)) search<-paste0("topics?topic_name=eq.",v)
#if(entity.type[i]=="persons"&!is.null(search)) search<-paste0(search,"&person_ids=",v)
if(entity.type[i]=="persons"&is.null(search)) search<-paste0("persons?person_name=eq.",v)
}
url<-paste0(url,search)
if(is.null(fields)){
fields = c('doc_id','authored','title')
}
# Check fields if fields entered
if(!is.null(fields)){
fields<-ck_list(fields)
f<-ck_fields(fields)
if(!is.null(f)) stop(f)
}
url<-paste0(url,"&select=docs(",paste(unlist(fields), collapse=','),")")
#Check collections if collections entered
if(!is.null(coll.name)){
coll.name<-ck_list(coll.name)
f<-ck_collections(coll.name)
if(!is.null(f)) stop(f)
url<-paste0(url,"&collections=",paste(unlist(coll.name), collapse=','))
}
if(!is.null(date)&(!is.null(start.date)|!is.null(end.date))){
if(is.null(notice)) notice<-"You cannot specify both a date and a start or end date." else notice<-paste0(notice,"\nYou cannot specify both a date and a start or end date.")
}
if(!is.null(start.date)&is.null(end.date)){
if(is.null(notice)) notice<-"Please specify an end date." else notice<-paste0(notice,"\nPlease specify an end date.")
}
if(!is.null(end.date)&is.null(start.date)){
if(is.null(notice)) notice<-"Please specify a start date." else notice<-paste0(notice,"\nPlease specify a start date.")
}
if(!is.null(notice)){
stop(notice)
}
if(!is.null(date)) {
d<-ck_date(date)
url<-paste0(url,"&authored=eq.",d)
}
if(!is.null(start.date)) {
s<-ck_date(start.date)
url<-paste0(url,"&authored=gte.",s)
}
if(!is.null(end.date)) {
e<-ck_date(end.date)
url<-paste0(url,"&authored=lte.",e)
if(as.Date(s,date.format="%y-%m-%d")>as.Date(e,date.format="%y-%m-%d")){
stop('Start date must be less than or equal to end date.')
}
}
url<-paste0(url,"&limit=",limit)
if(!is.null(run)){
u<-fromJSON(url)
return(u)
}
if(is.null(run)){
return(url)
}
}
h<-hlapi_entity('countries', value='Belize', date="01-30-1973", run=TRUE)
hlapi_entity('countries', value='Belize', date="01-30-1973")
url<-hlapi_entity('countries', value='Belize', date="01-30-1973")
url
fromJSON(""http://api.foiarchive.org/countries?country_name=eq.Belize&select=docs(doc_id,authored,title)&docs(authored)=eq.1973-01-30&limit=25"")
fromJSON("http://api.foiarchive.org/countries?country_name=eq.Belize&select=docs(doc_id,authored,title)&docs(authored)=eq.1973-01-30&limit=25")
fromJSON("http://api.foiarchive.org/countries?country_name=eq.Belize&select=docs(doc_id,authored,title)&docs.authored=eq.1973-01-30&limit=25")
h<-hlapi_entity('countries', value='Belize',  run=TRUE)
View(h)
View(h[[1]][[1]])
hlapi_entity('countries', value='Belize', date="1960-03-21", run=TRUE)
hlapi_entity('countries', value='Belize', date="1960-03-21")
fromJSON("http://api.foiarchive.org/countries?country_name=eq.Belize&select=docs(doc_id,authored,title)&docs.authored=eq.1960-03-21&docs.limit=25")
fromJSON("http://api.foiarchive.org/countries?country_name=eq.Belize&select=docs(doc_id,authored,title)&docs.limit=25")
h<-fromJSON("http://api.foiarchive.org/countries?country_name=eq.Belize&select=docs(doc_id,authored,title)&docs.limit=25")
#' History Lab API - Entity search
#'
#' This program allows a search of the History Lab API by type of entity (countries, topics, or persons).
#'
#' @param entity.type The type of entity to search (countries, topics, and/or persons)
#' @param value The code of the specific entity to be searched
#' @param coll.name History Lab collection to search
#' @param start.date/end.date Date range for the search
#' @param fields Specific History Lab fields to return
#'
#' @return
#' @export
#' @examples
#' hlapi_entity(c('countries','topics'), fields=c('subject','title'), value=c('100','0'), limit=50, run='run')
#"http://api.foiarchive.org/countries?country_name=eq.Belize&select=docs(doc_id,authored,classification,title)"
require(jsonlite)
source('R/histlabapi_utils.R')
hlapi_entity<-function(entity.type, value, limit = 25,fields=NULL,coll.name=NULL,date=NULL,start.date=NULL,end.date=NULL,run=NULL,...){
url<-"http://api.foiarchive.org/"
search<-NULL
notice<-NULL
if(missing(entity.type)){
notice <- "Please supply an entity: countries, topics, and/or persons"
stop(notice)
}
if(missing(value)){
notice <- "Please supply a value or values for the entity or entities"
stop(notice)
}
entity.type<-ck_list(entity.type)
#value<-ck_list(value)
if(length(value)!=length(entity.type)){
notice <- "The number of entities and the number of values do not match."
stop(notice)
}
for(i in 1:length(entity.type)){
if(entity.type[i] %ni% c("countries", "persons", "topics")){
notice <- "Acceptable entities are countries, topics, and/or persons"
stop(notice)
}
v<-gsub("( |&|,)","AND",value[i])
v<-gsub("(\\|)","OR",v)
# # Make sure countries is 3-digits
# if(entity.type[i]=="countries"){
#   g.list<-strsplit(v,'AND')
#       for(j in 1:length(g.list[[1]])){
#     if(nchar(g.list[[1]][j])==2) g.list[[1]][j]<-paste0("0",g.list[[1]][j])
#     if(nchar(g.list[[1]][j])==1) g.list[[1]][j]<-paste0("00",g.list[[1]][j])
#     if(nchar(g.list[[1]][j])>3) stop('Invalid value for countries')
#   }
#     v<-(paste0(g.list[[1]],collapse="AND"))
#     }
#if(entity.type[i]=="countries"&!is.null(search)) search<-paste0(search,"&geo_ids=",v)
if(entity.type[i]=="countries"&is.null(search)) search<-paste0("countries?country_name=eq.",v)
#if(entity.type[i]=="topics"&!is.null(search)) search<-paste0(search,"&topic_ids=",v)
if(entity.type[i]=="topics"&is.null(search)) search<-paste0("topics?topic_name=eq.",v)
#if(entity.type[i]=="persons"&!is.null(search)) search<-paste0(search,"&person_ids=",v)
if(entity.type[i]=="persons"&is.null(search)) search<-paste0("persons?person_name=eq.",v)
}
url<-paste0(url,search)
if(is.null(fields)){
fields = c('doc_id','authored','title')
}
# Check fields if fields entered
if(!is.null(fields)){
fields<-ck_list(fields)
f<-ck_fields(fields)
if(!is.null(f)) stop(f)
}
url<-paste0(url,"&select=docs(",paste(unlist(fields), collapse=','),")")
#Check collections if collections entered
if(!is.null(coll.name)){
coll.name<-ck_list(coll.name)
f<-ck_collections(coll.name)
if(!is.null(f)) stop(f)
url<-paste0(url,"&collections=",paste(unlist(coll.name), collapse=','))
}
if(!is.null(date)&(!is.null(start.date)|!is.null(end.date))){
if(is.null(notice)) notice<-"You cannot specify both a date and a start or end date." else notice<-paste0(notice,"\nYou cannot specify both a date and a start or end date.")
}
if(!is.null(start.date)&is.null(end.date)){
if(is.null(notice)) notice<-"Please specify an end date." else notice<-paste0(notice,"\nPlease specify an end date.")
}
if(!is.null(end.date)&is.null(start.date)){
if(is.null(notice)) notice<-"Please specify a start date." else notice<-paste0(notice,"\nPlease specify a start date.")
}
if(!is.null(notice)){
stop(notice)
}
if(!is.null(date)) {
d<-ck_date(date)
url<-paste0(url,"&docs.authored=eq.",d)
}
if(!is.null(start.date)) {
s<-ck_date(start.date)
url<-paste0(url,"&docs.authored=gte.",s)
}
if(!is.null(end.date)) {
e<-ck_date(end.date)
url<-paste0(url,"&docs.authored=lte.",e)
if(as.Date(s,date.format="%y-%m-%d")>as.Date(e,date.format="%y-%m-%d")){
stop('Start date must be less than or equal to end date.')
}
}
url<-paste0(url,"&docs.limit=",limit)
if(!is.null(run)){
u<-fromJSON(url)
return(u)
}
if(is.null(run)){
return(url)
}
}
h<-hlapi_entity('countries', value='Belize', date="1960-03-21", run=TRUE)
